;; ---------------------------------------------------------------------------------------;;
;; emacs/vim as editor in linux terminal, pycharm/sublime in gui. my 4 awesome editors...
;; 在emacs里也使用vim(emacs+evil mode)在纯文本编辑时还是使用vim快捷键更高效?突然发现emacs的acejump直接秒杀vim的所有光标移动操作
;; Don't waste time in ide staff. 
;; Focus on coding/algorithm... deep things.
;; prisma和tornado的创业故事总是提醒我写程序真正应该关注的核心是什么 ==>
;; 清晰深远的思路/熟悉的业务逻辑+使用合适的数据结构和算法写出代码来解决实际问题！
;; ---------------------------------------------------------------------------------------;;

;;-------build Emacs24.4/[or 25.1] from source code in centos6.7-minimal----------;;
; tar -xvzf emacs-24.4.tar.gz
; cd emacs-24.4
; yum install ncurses-devel  (只缺少这1个依赖库)
;; apt-get install libncurses-dev(Ubuntu) + `export TERM=xterm`(Ubuntu16)
; ./configure  --without-x   (无图形化)
; make
; make install 
; make clean
; emacs-24.4 --version
; centos6.7自带python2.6,2.7则需要自己编译安装(正常编译3步即可,不缺任何依赖包) 
;;----------------------------------------------------------------------;;

;;----------------Emacs Macro--------------------;;
;;1.record macro :
;;  'start-kbd-macro     【Ctrl+x (】
;;   write your Macro 
;;  'end-kbd-macro	 【Ctrl+x )】
;;2.name macro :
;;  'name-last-kbd-macro 【putin name】
;;3.insert macro code :
;;  'insert-kbd-macro    【putin name】(This will insert the lisp code for a named kmacro at the cursor position.)
;;4.copy macro lisp code, put it in your init.el.
;;5.(global-set-key (kbd "C/S-your-key") 'macro-name)
;;-----------------------------------------------;;

;;custome one Plugin in emacs:
;; M-x customize-group Plugin-name
;;-----------------------------------------------;;
;;C-x C-b  list buffers
;;D        kill buffer at cursor      
;;C-x b    switch to one buffer
;;C-x k    kill one buffer

;;------------------------------------init.el --- Emacs configuration---------------------------------------;;

;;Install Packages
;;download packages from melpa.org:
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages
  '(
   ; neotree
   ; multiple-cursors
   ; multi-term
   ; better-defaults
   ; ein
   ; magit
   ; elpy
   ; flycheck
   ; py-autopep8
   ; helm
   ; ace-jump-mode
   ; switch-window
   ; elscreen
   ; highlight-symbol
   ; comment-dwim-2
   ; vimish-fold
   ; powerline
   ; airline-themes
   ; ;smooth-scrolling
   ; jedi
    ))

(mapc #'(lambda (package)
	  (unless (package-installed-p package)
	    (package-install package)))
      myPackages)

;; Basic Configuration
(setq inhibit-startup-message t) ;; hide the startup message
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/molokai-theme/")  
;;(load-theme 'molokai t)  ;;load molokai theme  
;;(load-theme 'material t)  ;;load material theme
(global-linum-mode t) ;; enable line numbers globally
(setq linum-format "%d ")
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
(global-hl-line-mode 1)
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq-default truncate-lines t)  ;; no wordwrap when line is long

(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
;(setq highlight-indent-guides-character ?\|)

;;--------------------------------------------------------------------------------------------;;
;; use emacs + elpy as Python IDE: 【https://elpy.readthedocs.io/en/latest/ide.html】
;;--------------------------------------------------------------------------------------------;;

;; Python elpy Configuration
(elpy-enable)
;; (elpy-use-ipython)  ;; bpython is better !

;; use flycheck not flymake with elpy
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; evil mode using vim's keybinding:
(require 'evil)

;;--------------------------------------multiple-cursors--------------------------------------;;
(require 'multiple-cursors)
;;When you have an active region that spans multiple lines, the following will add a cursor to each line:
(global-set-key (kbd "C-c c") 'mc/edit-lines)   ;=====>> use `C-c` as another pre-key in emacs like `C-x` ! <<====;
;;When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
(global-set-key (kbd "C-c n") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c p") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c a") 'mc/mark-all-like-this)
;;magit: 
(global-set-key (kbd "C-x g") 'magit-status)

;;--------------------------------------multiple-term----------------------------------------;;
;;multiple-term -> https://www.emacswiki.org/emacs/MultiTerm
(require 'multi-term)
(setq multi-term-program "/usr/bin/zsh")  ;;(setq multi-term-program "/bin/bash")
;;multi-term.el provides the following interactive functions:
	;; multi-term – Create a new terminal buffer.
	;; multi-term-next – Switch to next terminal buffer.
	;; multi-term-prev – Switch to previous terminal buffer.
	;; multi-term-dedicated-open – Open dedicated terminal buffer.
	;; multi-term-dedicated-close – Close dedicated terminal window.
	;; multi-term-dedicated-toggle – Toggle dedicated terminal window.
	;; multi-term-dedicated-select – Select dedicated terminal window.

;;--------------------------------------multiple-screen----------------------------------------;;
;;elscreen config: (https://github.com/knu/elscreen)  (--------like Tmux--------)
(elscreen-start)  ;;start elscreen when emacs starts
(elscreen-toggle-display-tab)  ;; `c-z T` display tabs of elscreen.
;;usage:
;; C-z c  Create a new screen and switch to it.
;; C-z C  Create a new screen with the window-configuration of the current screen.
;; C-z k  Kill current screen.
;; C-z K  Kill other screens.
;; C-z n  Switch to the "next" screen in a cyclic order.
;; C-z p  Switch to the "previous" screen in a cyclic order.
;; C-z [0-9]  Jump to the screen number 0-9.
;; C-z '  Prompt for a screen number to switch to.
;; C-z "  Present a list of all screens for selection.
;; C-z C-s  Swap current screen with previous one.
;; C-z w  Show a list of screen.
;; C-z A  Allow the user to enter a name for the current screen.
;; C-z i  Show/hide the screen number in the mode line.
;; C-z T  Show/hide the tab on the top of each frame.
;; C-z ?  Show key bindings of ElScreen and Add-On softwares.

;;--------------------------------------tabbar-mode(dont't need this now...)----------------------------------------;;
;;tabbar mode:
;(add-to-list 'load-path "/root/.emacs.d/elpa/tabbar/")
;(require 'simple-tabbar-mode)
;(simple-tabbar-mode t)  ;;or just one `(require 'simple-tabbar-mode nil t)`.
;;tabbar usage:
;; ==> C-left, C-right, C-x C-left, C-x C-right navigates the tabs
;; - left click the tab: goto buffer 
;; - right click the tab: close buffer 
;; - mouse over tab shows file path
;; - click mouse prev/next(<>) goes though tabs
;; - top left prev/next(<>) tabs scroll through the off screen tabs

;; enable/disable autopep8 formatting when save.  
;; => need a manual modify: 'max_line_length': 120  #self.options.max_line_length in autopep8.py(line 533) !
;; => or just comment this to disable autopep8 formatting when save !! i don't need it ...
(require 'py-autopep8)
;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

(add-to-list 'load-path "/root/.emacs.d/elpa/neotree-20160306.730/")
(require 'neotree)
;;change neotree color
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highlight ((t (:background "black" :foreground "blue"))))
 '(lazy-highlight ((t (:foreground "purple" :underline t))))
 '(neo-dir-link-face ((t (:foreground "cyan"))))
 '(neo-file-link-face ((t (:foreground "purple")))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("b571f92c9bfaf4a28cb64ae4b4cdbda95241cd62cf07d942be44dc8f46c491f4" "a2e7b508533d46b701ad3b055e7c708323fb110b6676a8be458a758dd8f24e27" "e1994cf306356e4358af96735930e73eadbaf95349db14db6d9539923b225565" "fad38808e844f1423c68a1888db75adf6586390f5295a03823fa1f4959046f81" "e9460a84d876da407d9e6accf9ceba453e2f86f8b86076f37c08ad155de8223c" "251348dcb797a6ea63bbfe3be4951728e085ac08eee83def071e4d2e3211acc3" default)))
 '(git-gutter:separator-sign "|")
 '(package-selected-packages
   (quote
    (company-go vimish-fold switch-window smooth-scrolling rainbow-identifiers rainbow-delimiters rainbow-blocks py-autopep8 neotree multiple-cursors multi-term material-theme magit jedi highlight-symbol highlight-indent-guides helm git-timemachine git-gutter flycheck evil elscreen elpy ein comment-dwim-2 better-defaults airline-themes ace-jump-mode)))
 '(rainbow-delimiters-outermost-only-face-count 2))

;;smooth-scrolling 
;(add-to-list 'load-path "~/.emacs.d/elpa/smooth-scrolling/")
;(require 'smooth-scrolling)
;(smooth-scrolling-mode 1)
;(setq  smooth-scroll-margin 4)

;; emacs backup file path
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))

;; show git diff: 
(global-git-gutter-mode +1)

(set-face-foreground 
  'git-gutter:separator "yellow")
;;goto every submit version of a file in git:
;; M-x git-timemachine
;; p Visit previous historic version
;; n Visit next historic version
;; w Copy the abbreviated hash of the current historic version
;; W Copy the full hash of the current historic version
;; g Goto nth revision
;; q Exit the time machine.
;; b Run magit-blame on the currently visited revision (if magit available).

;;rainbow color: 
;(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
;(add-hook 'prog-mode-hook 'rainbow-identifiers-mode)

;; goto-char
(defun my-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
   Typing `my-go-to-char-key' again will move forwad to the next Nth occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (let ((case-fold-search nil))
    (if (eq n 1)
        (progn                            ; forward
          (search-forward (string char) nil nil n)
          (backward-char)
          (while (equal (read-key)
                        char)
            (forward-char)
            (search-forward (string char) nil nil n)
            (backward-char)))
      (progn                              ; backward
        (search-backward (string char) nil nil )
        (while (equal (read-key)
                      char)
          (search-backward (string char) nil nil )))))
  (setq unread-command-events (list last-input-event)))
(global-set-key (kbd "C-t") 'my-go-to-char)  ;; C-u C-t: goto-char forward.

;;undo tree:
;; p: up 
;; n: down 
;; b: left 
;; f: right  
;; t: show time
;; d: show diff 
(global-undo-tree-mode)

;;turn off highlight current line mode:
(global-hl-line-mode  1)

;;choose number to switch windows
(require 'switch-window) 
(global-set-key (kbd "C-x o") 'switch-window)

;;key binding 
(fset 'mypdb
   "import pdb; pdb.set_trace()") ;; insert pdb breakpoint code. record Emacs Macro to a function.
(fset 'copyword
   "\C-[\C-[[D\C-@\C-[\C-[[C\C-[w") ;; copy a whole word which cursor is in.
(fset 'mylog
   "from yxLog1 import yxdebug; yxdebug('-'*80)\C-m    yxdebug()")
;; --> you can use `pudb` in emacs term, same as eclipse's debug mode,pudb enhance emacs's python degug.
;;     or you should use `ipdb/pdb` in a simple but powerful way !!
;;     or good log can help you fix bug already !!

;;helm
(global-set-key (kbd "M-x") 'helm-M-x)

;;list of python class/function:  ;;or use `M-x helm-imenu`
(defun list-py-funcs (arg)
  (interactive "p")
  (message "functions")
  ;;(list-matching-lines "^\\bstatic\\b*\\binline\\b*[ ]*[A-Za-z_<>]+[ ]+[A-Za-z0-9_:]+[\(]"))
  ;;(list-matching-lines "^[A-Za-z0-9_]+[ ]+[A-Za-z0-9_<>: ]*[\(]"))
  (list-matching-lines "^[ _]*+[class|def]+[ ]+[A-Za-z0a-9_():]*"))  ;;regular expression in lisp to find

;; --------------------------------------key-bindings------------------------------------------------------ ;;
;;(global-set-key [f9] 'mylog) ;;log
;;(global-set-key [f8] 'mypdb)  ;;debug
;;(global-set-key [f5] 'cua-mode)  ;; use C-c/x/v/z in cua-mode like Windows.

(global-set-key [f7] 'multi-term) ;; open multiple term in emacs
(global-set-key [f6] 'helm-imenu)  ;;(or use list-py-funcs)

(global-set-key [f4] 'evil-mode)  ;; vim evil mode
(global-set-key [f3] 'global-linum-mode)
(global-set-key [f2] 'goto-line)
(global-set-key [f1] 'neotree-toggle)

(global-set-key (kbd "C-z") 'ace-jump-char-mode) ;ace-jump mode: go to anywhere in emacs!!
(global-set-key (kbd "M-n") 'scroll-up-line) 
(global-set-key (kbd "M-m") 'scroll-down-line) 
(global-set-key (kbd "C-x w") 'copyword)
(global-set-key (kbd "M-;") 'comment-dwim-2) ;;`C-/` is undo/redo in emacs, `M-;` is comment/uncomment.
(global-set-key (kbd "M-/") 'elpy-doc) ;; show python doc
(global-set-key (kbd "M-.") 'elpy-goto-definition)  ;; go to definition

(display-time)
(setq default-tab-width 4)
(fset 'yes-or-no-p 'y-or-n-p)  
;; auto-completion on brackets.
(setq skeleton-pair t)
(global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "'") 'skeleton-pair-insert-maybe)   ;; TODO: don't use in lisp-mode'

;;use mouse in term:
;(xterm-mouse-mode t)  ;; mouse-1=left click/mouse-3=right click/mouse-4=scroll up/mouse-5=scroll down

; --> press 'F1' in company-mode to show doc.
;;add jedi mode(show python-doc!) besides elpy's company mode:    TODO:some show problem screen too small...
; (add-hook 'python-mode-hook 'jedi:setup)
; (setq jedi:complete-on-dot t)  ;; run `M-x jedi:install-server` to install jedi server in emacs.

;;emacs以C-x r开头的命令来进行矩形操作,
;;先用C-@设一个mark，移动光标到另一点(2点形成矩形)，用以下命令进行列操作：
;;C-x r k 剪切一个矩形块
;;C-x r y 粘贴一个矩形块
;;C-x r c 清除一个矩形块(使其变成空白)
;;C-x r t 在选定区域的所有列前插入样的字符

;;在一组文件或者一个目录中查字符：
;; M-x grep/M-x rgrep 
;; == grep somestring -R ./

;;(set-face-attribute 'default (selected-frame) :height 150) ;; set font

;;(require 'highlight-symbol)
;; M-x highlight-symbol-mode or (highlight-symbol-mode 1)  to start it. 
;;(global-set-key [f3] 'highlight-symbol-next)
;;(global-set-key [(shift f3)] 'highlight-symbol-prev)

;;use powerline after elscreen: (https://github.com/jonathanchu/emacs-powerline)
;; (require 'powerline)
;; (setq powerline-arrow-shape 'arrow)   ;; the default
;; (setq powerline-arrow-shape 'curve)   ;; give your mode-line curves
;; (setq powerline-arrow-shape 'arrow14) ;; best for small fonts

;;use airline-theme for powerline: (https://github.com/AnthonyDiGirolamo/airline-themes)
(require 'airline-themes)
(load-theme 'airline-cool)  ;; choose one powerline theme from  ~/.emacs.d/elpa/airline-themes/.
(setq airline-display-directory  'airline-directory-Shortened)

;;fold code functions:
;; (global-set-key (kbd "<menu> v f") #'vimish-fold)
;; (global-set-key (kbd "<menu> v v") #'vimish-fold-delete)
;; vimish-fold-unfold
;; vimish-fold-unfold-all
;; vimish-fold-refold
;; vimish-fold-refold-all
;; vimish-fold-delete-all
;; vimish-fold-toggle
;; vimish-fold-toggle-all


;;------------------- you need to install some Python Packages using pip:--------------------;;
;; pip install flake8==2.6 autopep8 jedi pudb ipython virtualenv
;;-------------------------------------------------------------------------------------------;;


;; init.el ends here

